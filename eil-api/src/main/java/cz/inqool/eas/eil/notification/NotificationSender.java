package cz.inqool.eas.eil.notification;

import com.google.common.collect.Lists;
import cz.inqool.eas.common.mail.Mail;
import cz.inqool.eas.common.mail.MailQueue;
import cz.inqool.eas.eil.notification.event.NotificationEvent;
import cz.inqool.eas.eil.notification.generator.NotificationGenerator;
import cz.inqool.eas.eil.notification.template.EmailNotificationTemplate;
import cz.inqool.eas.eil.notification.template.NotificationTemplate;
import cz.inqool.eas.eil.notification.template.NotificationTemplateRepository;
import cz.inqool.eas.eil.notification.template.NotificationTemplateType;
import cz.inqool.eas.eil.notification.template.model.CommonModel;
import cz.inqool.eas.eil.notification.template.model.EmailModel;
import cz.inqool.eas.eil.notification.template.model.NotificationTemplateModel;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.lang.NonNull;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

@Slf4j
@Service
public class NotificationSender {

    private NotificationTemplateRepository notificationTemplateRepository;
    private NotificationRepository notificationRepository;

    private NotificationGenerator notificationGenerator;
    private MailQueue mailQueue;

    @Value("${eil.baseUrl}")
    private String baseUrl;

    private NotificationProperties notificationProperties;

    @Transactional
    public void sendEmailNotification(@NonNull NotificationEvent event, @NonNull NotificationTemplateModel model, @NonNull String email) {
        sendEmailNotifications(event, model, Set.of(email));
    }

    @Transactional
    public void sendEmailNotifications(@NonNull NotificationEvent event, @NonNull NotificationTemplateModel model, @NonNull Set<String> emails) {
        initModel(model);

        Set<NotificationTemplate> templates = Set.copyOf(notificationTemplateRepository.getActiveByEvent(event)).stream().filter(EmailNotificationTemplate.class::isInstance).collect(Collectors.toUnmodifiableSet());
        if (templates.isEmpty()) {
            if (emails.size() > 50) {
                log.warn("No templates for event '{}' were found. Notifications won't be send for {} recipients.", event, emails.size());
            } else {
                log.warn("No templates for event '{}' were found. Notifications won't be send for {}.", event, emails);
            }
            return;
        }
        List<Notification> notifications = sendNotifications(templates, model, emails);

        log.debug("Creating {} notifications for event {}...", notifications.size(), event);
        Lists.partition(notifications, 100).forEach(batchNotifications -> {
            notificationRepository.create(batchNotifications);
        });
    }

    private List<Notification> sendNotifications(Set<NotificationTemplate> templates, NotificationTemplateModel model, Set<String> emails) {
        List<Notification> notifications = new ArrayList<>();
        for (NotificationTemplate template : templates) {
            if (template.getType() != NotificationTemplateType.EMAIL) {
                log.warn("Wrong template type, skipping notification for template {} - {}.", template.getId(), template.getName());
                continue;
            }
            EmailNotificationTemplate emailTemplate = (EmailNotificationTemplate) template;
            for (String email : emails) {
                EmailNotification emailNotification = notificationGenerator.createEmailNotification(template.getEvent(), emailTemplate, model, null, email);
                log.trace("Queueing email sending for {} generated by {} using {}...", email, template.getEvent(), template);
                if (email != null) {
                    Mail mail = mailQueue.queue(email, emailNotification.getSubject(), emailNotification.getContent(), emailNotification.isHtml());
                    emailNotification.setMail(mail);
                } else {
                    log.error("Null email address has been passed");
                }
                notifications.add(emailNotification);
            }
        }
        return notifications;
    }

    private void initModel(NotificationTemplateModel model) {
        if (model instanceof CommonModel) {
            CommonModel commonModel = (CommonModel) model;
            commonModel.setTimestamp(LocalDateTime.now());
        }
        if (model instanceof EmailModel) {
            EmailModel emailModel = (EmailModel) model;
            emailModel.setApplicationName(notificationProperties.getApp().getName());
            emailModel.setApplicationUrl(baseUrl);
        }
    }

    @Autowired
    public void setNotificationRepository(NotificationRepository repository) {
        this.notificationRepository = repository;
    }

    @Autowired
    public void setNotificationTemplateRepository(NotificationTemplateRepository repository) {
        this.notificationTemplateRepository = repository;
    }

    @Autowired
    public void setNotificationProperties(NotificationProperties properties) {
        this.notificationProperties = properties;
    }

    @Autowired
    public void setNotificationGenerator(NotificationGenerator generator) {
        this.notificationGenerator = generator;
    }

    @Autowired
    public void setMailQueue(MailQueue mailQueue) {
        this.mailQueue = mailQueue;
    }
}
