package cz.inqool.eas.common.authored.store;

import cz.inqool.eas.common.authored.Authored;
import cz.inqool.eas.common.authored.tenant.CreatedByTenantGenerator;
import cz.inqool.eas.common.authored.tenant.TenantReference;
import cz.inqool.eas.common.authored.tenant.UpdatedByTenantGenerator;
import cz.inqool.eas.common.authored.user.CreatedByGenerator;
import cz.inqool.eas.common.authored.user.UpdatedByGenerator;
import cz.inqool.eas.common.authored.user.UserReference;
import cz.inqool.eas.common.dated.store.DatedObject;
import cz.inqool.entityviews.*;
import lombok.Getter;
import lombok.Setter;
import lombok.experimental.FieldNameConstants;
import org.hibernate.annotations.GenerationTime;
import org.hibernate.annotations.GeneratorType;

import javax.persistence.*;

import static cz.inqool.eas.common.domain.DomainViews.*;

@ViewableClass(views = {DEFAULT, CREATE, UPDATE, IDENTIFIED})
@ViewableMapping(views = DEFAULT, mappedTo = DEFAULT)
@ViewableMapping(views = CREATE, mappedTo = CREATE)
@ViewableMapping(views = UPDATE, mappedTo = UPDATE)
@ViewableMapping(views = IDENTIFIED, mappedTo = IDENTIFIED)
@ViewableImplement(value = Authored.class, views = DEFAULT)
@ViewableAnnotation(views = "NONE", value = FieldNameConstants.class) // to exclude FieldNameConstants annotation from generated views
@Getter
@Setter
@FieldNameConstants(innerTypeName = "AuthoredFields")
@MappedSuperclass
abstract public class AuthoredObject<ROOT> extends DatedObject<ROOT> implements Authored<ROOT> {
    /**
     * Field should be assigned with logged in {@link UserReference} when entity is first created.
     */
    @ViewableProperty(views = DEFAULT)
//    @GeneratorType( type = CreatedByGenerator.class, when = GenerationTime.INSERT)    //generated by @PrePersist method below
    @Embedded
    @AttributeOverride(name = "id", column = @Column(name = "created_by_id"))
    @AttributeOverride(name = "name", column = @Column(name = "created_by_name"))
    protected UserReference createdBy;

    /**
     * Field should be assigned with logged in {@link TenantReference} when entity is first created.
     */
    @ViewableProperty(views = DEFAULT)
//    @GeneratorType( type = CreatedByTenantGenerator.class, when = GenerationTime.INSERT)    //generated by @PrePersist method below
    @Embedded
    @AttributeOverride(name = "id", column = @Column(name = "created_by_tenant_id"))
    @AttributeOverride(name = "name", column = @Column(name = "created_by_tenant_name"))
    protected TenantReference createdByTenant;

    /**
     * Field should be assigned with logged in {@link UserReference} when entity is updated.
     */
    @ViewableProperty(views = DEFAULT)
    @GeneratorType( type = UpdatedByGenerator.class, when = GenerationTime.ALWAYS)
    @Embedded
    @AttributeOverride(name = "id", column = @Column(name = "updated_by_id"))
    @AttributeOverride(name = "name", column = @Column(name = "updated_by_name"))
    protected UserReference updatedBy;

    /**
     * Field should be assigned with logged in {@link TenantReference} when entity is updated.
     */
    @ViewableProperty(views = DEFAULT)
    @GeneratorType( type = UpdatedByTenantGenerator.class, when = GenerationTime.ALWAYS)
    @Embedded
    @AttributeOverride(name = "id", column = @Column(name = "updated_by_tenant_id"))
    @AttributeOverride(name = "name", column = @Column(name = "updated_by_tenant_name"))
    protected TenantReference updatedByTenant;

    /**
     * Field should be assigned with logged in {@link UserReference} in Store.
     */
    @ViewableProperty(views = DEFAULT)
    @Embedded
    @AttributeOverride(name = "id", column = @Column(name = "deleted_by_id"))
    @AttributeOverride(name = "name", column = @Column(name = "deleted_by_name"))
    protected UserReference deletedBy;

    /**
     * Field should be assigned with logged in {@link TenantReference} in Store.
     */
    @ViewableProperty(views = DEFAULT)
    @Embedded
    @AttributeOverride(name = "id", column = @Column(name = "deleted_by_tenant_id"))
    @AttributeOverride(name = "name", column = @Column(name = "deleted_by_tenant_name"))
    protected TenantReference deletedByTenant;

    @PrePersist
    @ViewableProperty
    public void generateCreatedBy() {   //in rare cases, generator that is directly on field doesn't get the job done, because hibernate calls update right after persist and deletes generated data. This happens when the entity is @Versioned and there is an unitialized or non-empty collection on it, or there is equals and hashcode missing on some related entity
        this.createdBy = CreatedByGenerator.generateValue(this);
        this.createdByTenant = CreatedByTenantGenerator.generateValue(this);
    }
}
